--- buildroot/arch/Config.in.arm.orig
+++ buildroot/arch/Config.in.arm
@@ -795,6 +795,35 @@
 	default "16K" if BR2_ARM64_PAGE_SIZE_16K
 	default "64K" if BR2_ARM64_PAGE_SIZE_64K
 
+choice
+	prompt "MMU Page Size"
+	default BR2_ARM_PAGE_SIZE_4K
+	depends on BR2_arm || BR2_armeb
+	help
+	  The default is 4KB, and you should probably keep this unless
+	  you know what you are doing. In particular, the kernel
+	  configuration must match this choice. If your kernel is
+	  built by Buildroot, the kernel configuration is
+	  automatically adjusted, but not if you built your kernel
+	  outside of Buildroot.
+
+config BR2_ARM_PAGE_SIZE_4K
+	bool "4KB"
+
+config BR2_ARM_PAGE_SIZE_16K
+	bool "16KB"
+
+config BR2_ARM_PAGE_SIZE_64K
+	bool "64KB"
+
+endchoice
+
+config BR2_ARM_PAGE_SIZE
+	string
+	default "4K" if BR2_ARM_PAGE_SIZE_4K
+	default "16K" if BR2_ARM_PAGE_SIZE_16K
+ 	default "64K" if BR2_ARM_PAGE_SIZE_64K
+ 
 config BR2_ARCH
 	default "arm"		if BR2_arm
 	default "armeb"		if BR2_armeb
--- buildroot/arch/arch.mk.orig
+++ buildroot/arch/arch.mk
@@ -19,13 +19,13 @@
 GCC_TARGET_MODE := $(call qstrip,$(BR2_GCC_TARGET_MODE))
 
 # Explicitly set LD's "max-page-size" instead of relying on some defaults
-ifeq ($(BR2_ARC_PAGE_SIZE_4K)$(BR2_ARM64_PAGE_SIZE_4K),y)
+ifeq ($(BR2_ARC_PAGE_SIZE_4K)$(BR2_ARM64_PAGE_SIZE_4K)$(BR2_ARM_PAGE_SIZE_4K),y)
 ARCH_TOOLCHAIN_WRAPPER_OPTS += -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
 else ifeq ($(BR2_ARC_PAGE_SIZE_8K),y)
 ARCH_TOOLCHAIN_WRAPPER_OPTS += -Wl,-z,max-page-size=8192 -Wl,-z,common-page-size=8192
-else ifeq ($(BR2_ARC_PAGE_SIZE_16K)$(BR2_ARM64_PAGE_SIZE_16K),y)
+else ifeq ($(BR2_ARC_PAGE_SIZE_16K)$(BR2_ARM64_PAGE_SIZE_16K)$(BR2_ARM_PAGE_SIZE_16K),y)
 ARCH_TOOLCHAIN_WRAPPER_OPTS += -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384
-else ifeq ($(BR2_ARM64_PAGE_SIZE_64K),y)
+else ifeq ($(BR2_ARM64_PAGE_SIZE_64K)$(BR2_ARM_PAGE_SIZE_64K),y)
 ARCH_TOOLCHAIN_WRAPPER_OPTS += -Wl,-z,max-page-size=65536 -Wl,-z,common-page-size=65536
 endif
 
